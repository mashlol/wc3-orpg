__DEBUG__ = false

local requireMap = {}
local requireCache = {}

function require(path)
    if requireCache[path] == nil then
        requireCache[path] = {}
        local realObj = requireMap[path]()
        for key, val in pairs(realObj) do
          requireCache[path][key] = val
        end
    end
    return requireCache[path]
end

function tprint(tbl, indent)
  if not indent then indent = 0 end
  for k, v in pairs(tbl) do
    formatting = string.rep("  ", indent) .. k .. ": "
    if type(v) == "table" then
      print(formatting)
      tprint(v, indent+1)
    else
      print(formatting .. v)
    end
  end
end

function string.split(inputstr, sep)
  local t={}
  for str in string.gmatch(inputstr, "([^"..sep.."]+)") do
    table.insert(t, str)
  end
  return t
end

do
  local prefixes = {"war3map.lua", "blizzard.j.lua"}
  local n = #prefixes
  local prefixesLen = {}
  for i = 1, n do
    prefixesLen[i] = string.len(prefixes[i])
  end
  local list = {}
  local lastMsg = nil

  local function getPos(msg, pos)
    error(msg, pos)
  end

  local function store(msg)
    lastMsg = msg
  end

  local function checkPrefixes()
    for i = 1, n do
      if string.sub(lastMsg, 1, prefixesLen[i]) == prefixes[i] then
        return true
      end
    end
    return false
  end

  ---Returns stack trace, but only the position of the called functions, not its names
  ---@return string
  function GetStackTrace()
    local stack = ""

    local i = 4
    local p = 1
    while true do
      xpcall(getPos, store, "- " .. p, i)
      if not checkPrefixes() then break end
      table.insert(list, lastMsg)
      i = i + 1
      p = p + 1
    end

    for j = #list, 1, -1 do
      stack = stack .. list[j] .. "\n"
    end

    list = {}

    return stack
  end
end
